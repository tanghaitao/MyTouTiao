 
ReactiveCocoa  RAC  https://www.jianshu.com/p/87ef6720a096

1 ReactiveCocoa作用

方法选择器 代理 通知 kvo 都可用ReactiveCocoa实现
把要监听的事件 事件的回调 以block等方式 代码放到一起执行 高聚合 低耦合思想

2 编程思想

 面向过程  以处理事情的业务逻辑为核心，一步步实现
 面向对象  万物皆为对象，共同的特性 可抽取成一个类
 链式编程思想  将个方法以.方式连接一起，使代码有可读性 a(1).b(2).c(3)  方法返回值为block block的返回值是对象本身如： -(CaculatorMaker *(^)(int))add;
 
 
3 链式编程思想 模仿masonry，写一个加法计算器，练习链式编程思想。


NSObject+Caculator.h

@class CaculatorMaker;
@interface NSObject (Caculator)

//计算
+(CGFloat)makeCaulators:(void(^))(CaculatorMaker *make)) caculatorMaker;
@end



NSObject+Caculator.m

@implementation NSObject (Caculator)

+(CGFloat)makeCaulators:(void(^))(CaculatorMaker *make)) caculatorMaker
{
      //1.创建计算管理者
      CaculatorMaker *mgr = {[CaculatorMaker alloc] init];
      return mgr.result;
}



CaculatorMaker.h

@interface CaculatorMaker :NSObject

@property (nonatomic, assign) int result;

//运算方法
-(CaculatorMaker *(^)(int))add;
-(CaculatorMaker *(^)(int))sub;
-(CaculatorMaker *(^)(int))muilt;
-(CaculatorMaker *(^)(int))divide;

@end


CaculatorMaker.m

@implementation CaculatorMaker
-(CaculatorMaker *(^)(int))add
{
    return ^CaculatorMaker *(int value){
       _result +=value;
       return self;
    }
}

@end


int result = [NSObject makeCaculators:^(CaculatorMaker *make){
    make.add(1).add(2).divide(5);
}];


4 链式编程思想 一切皆为流，不需要考虑调用顺序，直接考虑结果。


6  函数式编程思想  把一系列操作，用方法套方法的方式实现 每个方法必须返回对象本身，方法的参数是block block中的参数是需要操作的参数  block返回值为最后操作的结果

7  函数式编程思想仿ReactiveCocoa 写一个加法计算器,并且加法计算器自带判断是否等于某个值.

8  案例

Caculator.h

@interface Caculator :NSObject

@property (nonatomic, assign) BOOL isEqule;
@property (nonatomic, assign) int result;

//运算方法
-(Caculator *)caculator:(int (^) (int result))caculator;
-(Caculator *)equle:(BOOL (^) (int result))operation;

@end


Caculator.m

@implementation Caculator

-(Caculator *)caculator:(int (^) (int result))caculator{

}

@end



Caculator *c = [[Caculator alloc]init];
//计算2*5 并判断是否等于10
BOOL isqule =[[[c caculator:^(int result){
     result += 2;
     result *= 5;
     return result; 
}] equle:^BOOL(int result){

}] isEqule];//判断每一个block返回的10是否与传入result的10相等

NSLog("%d",isqule);


9  ReactiveCocoa编程思想
ReactiveCocoa结合了几种编程风格：函数式编程（Functional Programming）响应式编程（Reactive Programming）
被描述为函数响应式编程（FRP）框架。不需要考虑调用顺序，直接考虑结果 ，把每一次操作都写成一系列嵌套的方法中

10  导入ReactiveCocoa框架
podfile 文件中
use_frameworks！
pod 'ReactiveCocoa', '~> 4.0.2-alpha-1'

11 ReactiveCocoa常见类

RACSiganl 信号类 RAC中最核心的类 ,搞定这个类就能用ReactiveCocoa开发了
只要有数据改变，RACSiganl接收到此数据，内部交给订阅者去发出数据，这个类不具备发送数据能力，数据的每次改变都会调用subscribeNext 订阅这个方法，
subscribeNext内部会创建订阅者
冷信号：一个信号未被订阅，即使数据改变了，也找不到订阅者，就无法发送数据，默认信号都是冷信号
热信号：一个信号被订阅，变为热信号，数据改变了，找到订立者发出数据


RACSiganl 简单使用：
  1.创建信号 + (RACSignal *)createSignal:(RACDisposable * (^)(id<RACSubscriber> subscriber))didSubscribe
  2.订阅信号,才会激活信号. - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock
  3.发送信号 - (void)sendNext:(id)value
  
  // 1.创建信号
    RACSignal *siganl = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {//顺序1：didSubscribe保存到信号中
        
        // block调用时刻：每当有订阅者订阅信号，就会调用block。
        
        // 2.发送信号
        [subscriber sendNext:@1];//顺序3：subscriber订阅者调用RACSignal的didSubscribe，didSubscribe调用subscriber订阅者sendNext
        
        // 如果不在发送数据，最好发送信号完成，内部会自动调用[RACDisposable disposable]取消订阅信号。
        [subscriber sendCompleted];
 
        return [RACDisposable disposableWithBlock:^{
            
            // block调用时刻：当信号发送完成或者发送错误，就会自动执行这个block,取消订阅信号。
            
            // 执行完Block后，当前信号就不在被订阅了。
            
            NSLog(@"信号被销毁");
            
        }];
    }];
    
    // 3.订阅信号,才会激活信号.
    [siganl subscribeNext:^(id x) {//顺序2：创建subscriber订阅者，把nextBlock保存到subscriber中
        // block调用时刻：每当有信号发出数据，就会调用block.
        NSLog(@"接收到数据:%@",x);
    }];



RACSignal底层实现：

    // 1.创建信号，首先把didSubscribe保存到信号中，还不会触发。
    // 2.当信号被订阅，也就是调用signal的subscribeNext:nextBlock
    // 2.2 subscribeNext内部会创建订阅者subscriber，订阅都属于signal对象的一个成员，并且把nextBlock保存到subscriber中。
    // 2.1 subscribeNext内部会调用siganl的didSubscribe
    // 3.siganl的didSubscribe中调用[subscriber sendNext:@1];
    // 3.1 sendNext底层其实就是执行subscriber的nextBlock
    
    创建信号RACSiganl 会保存didSubscribe
    订阅信号RACSiganl 会创建订阅者subscriber
    订阅者subscriber  会保存nextBlock 同时创建一个RACCompoundDisp（复合disp对象）
    RACCompoundDisp对象  会保存RACSiganl信号 订阅者subscriber
    订阅者subscriber发送信号时  [subscriber sendNext:@1]; 信号RACSigan中保存的didSubscribe会调用[subscriber sendNext:@1];
    订阅者又会执行保存的nextBlock
    
    
RACSubscriber 订阅者：用于发送信号，这是一个协议，不是一个类，只要遵守这个协议，并且实现方法才能成为订阅者。
通过createSignal创建的信号，都有一个订阅者，帮助他发送数据。

RACDisposable 取消订阅或者清理资源，当信号发送完成[subscriber sendCompleted] 或者发送错误的时候，就会自动触发它。可主动调用它取消订阅[disposable dispost]

RACSubject 译为主题 可提供RACSiganl信号，自己可以充当信号，又能发送信号。用来代替代理，有了它，就不必要定义代理了
当订阅时会把订阅者保存到RACSubscriber的_subscribers
遍历subject中_subscribers中的订阅者，依次发送信息 ，可以被订阅多次，并且只能是先订阅后发布。

RACReplaySubject:重复提供信号类，RACSubject的子类。可以先发送信号，再订阅信号 
    场景1：一个信号每被订阅一次，想重复再接收一次，就可以先发信号
    场景2：可以设置capacity数量来限制缓存的value的数量,即只缓充最新的几个值
    
    

RACSubject简单使用:

   // 1.创建信号
    RACSubject *subject = [RACSubject subject];

    // 2.订阅信号
    [subject subscribeNext:^(id x) { //创建订阅者 只保存订阅者 nextBlock保存到订阅者中， nextBlock已经赋值
        // block调用时刻：当信号发出新值，就会调用.
        NSLog(@"第一个订阅者%@",x);
    }];
    [subject subscribeNext:^(id x) { //创建订阅者 只保存订阅者 nextBlock保存到订阅者中， nextBlock已经赋值
        // block调用时刻：当信号发出新值，就会调用.
        NSLog(@"第二个订阅者%@",x);
    }];

    // 3.发送信号
    [subject sendNext:@"1"];//遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock

    

RACSubject底层原理：
  // RACSubject使用步骤
    // 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。
    // 2.订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock
    // 3.发送信号 sendNext:(id)value
     
     原理：
    // RACSubject:底层实现和RACSignal不一样。区别在于发送信号时，RACSiganl是通过RACSiganl的didSubscribe
     调用[subscriber sendNext:]去发送，而RACSubject是直接遍历所有订阅者，再[subscriber sendNext:]发送
    // 1.调用subscribeNext订阅信号，只是把订阅者保存起来，并且订阅者的nextBlock已经赋值了。
    // 2.调用sendNext发送信号，遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。 
    


RACReplaySubject使用：

    // 1.创建信号
    RACReplaySubject *replaySubject = [RACReplaySubject subject];

    // 2.发送信号
    [replaySubject sendNext:@1];//保存所有的值，遍历之前存的订阅者，每个订阅者都调用nextBlock发送值
    [replaySubject sendNext:@2];

    // 3.订阅信号
    [replaySubject subscribeNext:^(id x) {//遍历保存的所有值，每个订阅者都调用nextBlock发送此值

        NSLog(@"第一个订阅者接收到的数据%@",x);
    }];

    // 订阅信号
    [replaySubject subscribeNext:^(id x) {

        NSLog(@"第二个订阅者接收到的数据%@",x);
    }];  



RACReplaySubject底层实现原理：

// RACReplaySubject使用步骤:
    // 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。
    // 2.可以先订阅信号，也可以先发送信号。
    // 2.1 订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock
    // 2.2 发送信号 sendNext:(id)value

    原理：
    // RACReplaySubject:底层实现和RACSubject不一样。
    // 1.调用sendNext发送信号，把值保存起来，然后遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。
    // 2.调用subscribeNext订阅信号，遍历保存的所有值，一个一个调用订阅者的nextBlock

    // 如果想当一个信号被订阅，就重复播放之前所有值，需要先发送信号，在订阅信号。
    // 也就是先保存值，在订阅值。
    




RACSubject 来替换代理的使用
  实现： 点击控制器a的按钮，跳转到控制器b，点击控制器b的按钮，告诉控制器a控制器b已经点击了按钮
  
		步骤一：在第二个控制器.h，添加一个RACSubject代替代理。
		
		@interface TwoViewController : UIViewController

		@property (nonatomic, strong) RACSubject *delegateSignal;

		@end

		步骤二：监听第二个控制器按钮点击
		@implementation TwoViewController
		- (IBAction)notice:(id)sender {
			// 通知第一个控制器，告诉它，按钮被点了
	
			 // 通知代理
			 // 判断代理信号是否有值
			if (self.delegateSignal) {
				// 有值，才需要通知
				[self.delegateSignal sendNext:nil];
			}
		}
		@end

		步骤三：在第一个控制器中，监听跳转按钮，给第二个控制器的代理信号赋值，并且监听.
		
		@implementation OneViewController 
		- (IBAction)btnClick:(id)sender {
	
			// 创建第二个控制器
			TwoViewController *twoVc = [[TwoViewController alloc] init];
	
			// 设置代理信号
			twoVc.delegateSignal = [RACSubject subject];
	
			// 订阅代理信号
			[twoVc.delegateSignal subscribeNext:^(id x) {
	   
				NSLog(@"点击了通知按钮");
			}];
	
			// 跳转到第二个控制器
			[self presentViewController:twoVc animated:YES completion:nil];
	
		}
		@end
		
		
		
		


RAC定时器：
    @weakify(self)
    [[_btn rac_signalForControlEvents:UIControlEventTouchUpInside] subscribeNext:^(__kindof UIControl * _Nullable x) {
        @strongify(self)
        
        x.enabled = false;
        
        self.time = 10;
        
        //这个就是RAC中的GCD  1秒后执行发送验证码
        self.dispoable = [[RACSignal interval:1.0 onScheduler:[RACScheduler mainThreadScheduler]] subscribeNext:^(NSDate * _Nullable x) {
            _time --;
            NSString * title = _time > 0 ? [NSString stringWithFormat:@"请等待 %d 秒后重试",_time] : @"发送验证码";
            [self.btn setTitle:title forState:UIControlStateNormal | UIControlStateDisabled];
            self.btn.enabled = (_time==0)? YES : NO;
            if (_time == 0) {
                [self.dispoable dispose];
            }
        }];
    }];		




RACTuple   元组类,类似NSArray或字典用来包装值. 
	RACTuple *x ； 
	RACTupleUnpack(NSString *key,NSString *value) = x;   
	NSString *key = x[0];



RACSequence   RAC中的集合类，用于代替NSArray,NSDictionary,可以使用它来快速遍历数组和字典。 RACSequence可以转为RACSignal信号类

    1.RACSequence和RACTuple简单使用 遍列数组，字典，字典转模型
    
			 // 1.遍历数组
			NSArray *numbers = @[@1,@2,@3,@4];
	
			// 这里其实是三步
			// 第一步: 把数组转换成集合RACSequence numbers.rac_sequence
			// 第二步: 把集合RACSequence转换RACSignal信号类,numbers.rac_sequence.signal
			// 第三步: 订阅信号，激活信号，会自动把集合中的所有值，遍历出来。
			[numbers.rac_sequence.signal subscribeNext:^(id x) {//把number转成RACSequence再转成RACSignal信号去订阅
	   
				NSLog(@"%@",x);
			}];
	
	
			// 2.遍历字典,遍历出来的键值对会包装成RACTuple(元组对象)
			NSDictionary *dict = @{@"name":@"xmg",@"age":@18};
			[dict.rac_sequence.signal subscribeNext:^(RACTuple *x) {
	   
				// 解包元组，会把元组的值，按顺序给参数里面的变量赋值
				RACTupleUnpack(NSString *key,NSString *value) = x;
		
				// 相当于以下写法
		        // NSString *key = x[0];
		        // NSString *value = x[1];
		
				NSLog(@"%@ %@",key,value);
		
			}];
	
	
			// 3.字典转模型
			// 3.1 OC写法
			NSString *filePath = [[NSBundle mainBundle] pathForResource:@"flags.plist" ofType:nil];
	
			NSArray *dictArr = [NSArray arrayWithContentsOfFile:filePath];
	
			NSMutableArray *items = [NSMutableArray array];
	
			for (NSDictionary *dict in dictArr) {
				FlagItem *item = [FlagItem flagWithDict:dict];
				[items addObject:item];
			}
	
			// 3.2 RAC写法
			NSString *filePath = [[NSBundle mainBundle] pathForResource:@"flags.plist" ofType:nil];
	
			NSArray *dictArr = [NSArray arrayWithContentsOfFile:filePath];

			NSMutableArray *flags = [NSMutableArray array];
	
			_flags = flags;
	
			// rac_sequence注意点：调用subscribeNext，并不会马上执行nextBlock，而是会等一会。
			[dictArr.rac_sequence.signal subscribeNext:^(id x) {
				// 运用RAC遍历字典，x：字典
		
				FlagItem *item = [FlagItem flagWithDict:x];
		
				[flags addObject:item];
		
			}];
	
			NSLog(@"%@",  NSStringFromCGRect([UIScreen mainScreen].bounds));
	
	
			// 3.3 RAC高级写法:
			NSString *filePath = [[NSBundle mainBundle] pathForResource:@"flags.plist" ofType:nil];
	
			NSArray *dictArr = [NSArray arrayWithContentsOfFile:filePath];
			// map:映射的意思，目的：把原始值value映射成一个新值
			// array: 把集合转换成数组
			// 底层实现：当信号被订阅，会遍历集合中的原始值，映射成新值，并且保存到新的数组里。
			NSArray *flags = [[dictArr.rac_sequence map:^id(id value) {
	 
				return [FlagItem flagWithDict:value];
		
			}] array];





RACCommand   RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程
     
     监听按钮点击，网络请求
     
     
			// 一、RACCommand使用步骤:
			// 1.创建命令 initWithSignalBlock:(RACSignal * (^)(id input))signalBlock
			// 2.在signalBlock中，创建RACSignal，并且作为signalBlock的返回值
			// 3.执行命令 - (RACSignal *)execute:(id)input
	
			// 二、RACCommand使用注意:
			// 1.signalBlock必须要返回一个信号，不能传nil.
			// 2.如果不想要传递信号，直接创建空的信号[RACSignal empty];
			// 3.RACCommand中信号如果数据传递完，必须调用[subscriber sendCompleted]，这时命令才会执行完毕，否则永远处于执行中。
			// 4.RACCommand需要被强引用，否则接收不到RACCommand中的信号，因此RACCommand中的信号是延迟发送的。
	        // 5.executing 监听当前命令是否正在执行executing，命令是否正在工作
	
	
			// 1.创建命令
			RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {
		
		
				NSLog(@"执行命令");
		
				// 创建空信号,必须返回信号
				//        return [RACSignal empty];
		
				// 2.创建信号,用来传递数据
				return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
			        //网络请求完成后可以调用下面的代码
					[subscriber sendNext:@"请求数据"];//调一次，则subscribeNext执行一次
			
					// 注意：数据传递完，最好调用sendCompleted，这时命令才执行完毕。
					[subscriber sendCompleted];
			
					return nil;
				}];
		
			}];
	
			// 强引用命令，不要被销毁，否则接收不到数据
			_conmmand = command;
	
	
   
			// 3.订阅RACCommand中的信号
			[command.executionSignals subscribeNext:^(id x) {
		
				[x subscribeNext:^(id x) {//订阅executionSignals就能拿到RACCommand中返回的信号，然后订阅返回的信号，就能获取发出的值。
			
					NSLog(@"%@",x);
				}];
		
			}];
	
			// RAC高级用法
			// switchToLatest:用于signal of signals，获取signal of signals发出的最新信号,也就是可以直接拿到RACCommand中的信号
			[command.executionSignals.switchToLatest subscribeNext:^(id x) {
		
				NSLog(@"%@",x);
			}];
	
			// 4.监听命令是否执行完毕,默认会来一次，可以直接跳过，skip表示跳过第一次信号。
			[[command.executing skip:1] subscribeNext:^(id x) {
		
				if ([x boolValue] == YES) {
					// 正在执行
					NSLog(@"正在执行");
			
				}else{
					// 执行完成
					NSLog(@"执行完成");
				}
		
			}];
		   // 5.执行命令
			[self.conmmand execute:@1];
	
	
	相关问题：
	
	  RACCommand设计思想：内部signalBlock为什么要返回一个信号，这个信号有什么用？
		1.在RAC开发中，通常会把网络请求封装到RACCommand，直接执行某个RACCommand就能发送请求。
		 2.当RACCommand内部请求到数据的时候，需要把请求的数据传递给外界，这时候就需要通过signalBlock返回的信号传递了。
	
      如何拿到RACCommand中返回信号发出的数据。
		// 1.RACCommand有个执行信号源executionSignals，这个是signal of signals(信号的信号),意思是信号发出的数据是信号，不是普通的类型。
		// 2.订阅executionSignals就能拿到RACCommand中返回的信号，然后订阅返回的信号，就能获取发出的值。
	
		// 五、监听当前命令是否正在执行executing
	
		// 六、使用场景,监听按钮点击，网络请求
		
		
		

RACMulticastConnection（多播连接）    用于当一个信号，被多次订阅时，创建信号的block会执行多次，造成副作用，可以使用这个类处理。
                                    RACMulticastConnection的创建通过RACSignal的-publish或者-muticast
                                    



RACMulticastConnection使用步骤:
    // 1.创建信号 + (RACSignal *)createSignal:(RACDisposable * (^)(id<RACSubscriber> subscriber))didSubscribe
    // 2.创建连接 RACMulticastConnection *connect = [signal publish];
    // 3.订阅信号,注意：订阅的不在是之前的信号，而是连接的信号。 [connect.signal subscribeNext:nextBlock]
    // 4.连接 [connect connect]
    
    
     // 需求：假设在一个信号中发送请求，每次订阅一次都会发送请求，这样就会导致多次请求。
     // 解决：使用RACMulticastConnection就能解决.
    
		// 1.创建请求信号
	   RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
		
		
			NSLog(@"发送请求");
	 
			return nil;
		}];
		// 2.订阅信号
		[signal subscribeNext:^(id x) {
	   
			NSLog(@"接收数据");
		
		}];
		// 2.订阅信号
		[signal subscribeNext:^(id x) {
		
			NSLog(@"接收数据");
		
		}];
	
		// 3.运行结果，会执行两遍发送请求，也就是每次订阅都会发送一次请求
	
	
	
		// RACMulticastConnection:解决重复请求问题
		// 1.创建信号
		RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {//保存了didSubscribe
		
		
			NSLog(@"发送请求");
			[subscriber sendNext:@1];//didSubscribe会调用 订阅者的sendNext 会遍历RACSubject所有订阅者发送信号
		
			return nil;
		}];
	
		// 2.创建连接
		RACMulticastConnection *connect = [signal publish];
	
		// 3.订阅信号，
		// 注意：订阅信号，也不能激活信号，只是保存订阅者到数组，必须通过连接,当调用连接，就会一次性调用所有订阅者的sendNext:
		[connect.signal subscribeNext:^(id x) {//connect.signal是RACSubject，不再是RACSignal，保存订阅者，订阅者保存nextBlock
	   
			NSLog(@"订阅者一信号");
		
		}];
	
		[connect.signal subscribeNext:^(id x) {
		
			NSLog(@"订阅者二信号");
		
		}];
	
		// 4.连接,激活信号
		[connect connect];




RACMulticastConnection 底层原理：

    // 1.创建connect，connect.sourceSignal -> RACSignal(原始信号)  connect.signal -> RACSubject
    // 2.订阅connect.signal，会调用RACSubject的subscribeNext，创建订阅者，而且把订阅者保存起来，不会执行block。
    // 3.[connect connect]内部会订阅RACSignal(原始信号)，并且订阅者是RACSubject
    // 3.1.订阅原始信号，就会调用原始信号中的didSubscribe
    // 3.2 didSubscribe，拿到订阅者调用sendNext，其实是调用RACSubject的sendNext
    // 4.RACSubject的sendNext,会遍历RACSubject所有订阅者发送信号。
    // 4.1 因为刚刚第二步，都是在订阅RACSubject，因此会拿到第二步所有的订阅者，调用他们的nextBlock
    
    个人理解：
    createSignal:创建信号，保存didSubscribec
    pubilish:创建一个RACSubject，它可以接收发出信号，并把RACSignal与RACSubject保存到连接类connect中
    connect.signal订阅信号： 这里调用的是RACSubject的订阅方法，并创建订阅者，把nextBlock保存到subscriber订阅中
    [connect connect]激活连接：RACSubject会遍列数组中的订阅者，信号RACSigan中保存的didSubscribe会调用每个订阅者[subscriber sendNext:@1]送信号。
    
    
    
    

RACScheduler  RAC中的队列，用GCD封装的。


RACUnit   表⽰stream不包含有意义的值,也就是看到这个，可以直接理解为nil.


RACEvent   把数据包装成信号事件(signal event)。它主要通过RACSignal的-materialize来使用，然并卵。





ReactiveCocoa开发中常见用法：

     rac_signalForSelector：用于替代代理
     
    // 1.代替代理
    // 需求：自定义redView,监听红色view中按钮点击
    // 之前都是需要通过代理监听，给红色View添加一个代理属性，点击按钮的时候，通知代理做事情
    // rac_signalForSelector:把调用某个对象的方法的信息转换成信号，就要调用这个方法，就会发送信号。
    // 这里表示只要redV调用btnClick:,就会发出信号，订阅就好了。
    
    [[redV rac_signalForSelector:@selector(btnClick:)] subscribeNext:^(id x) {
        NSLog(@"点击红色按钮");
    }];



    代替KVO   rac_valuesAndChangesForKeyPath：用于监听某个对象的属性改变。
    
    // 2.KVO
    // 把监听redV的center属性改变转换成信号，只要值改变就会发送信号
    // observer:可以传入nil
    [[redV rac_valuesAndChangesForKeyPath:@"center" options:NSKeyValueObservingOptionNew observer:nil] subscribeNext:^(id x) {

        NSLog(@"%@",x);

    }];
    
    
    
    监听事件:   rac_signalForControlEvents：用于监听某个事件。
    
    // 3.监听事件
    // 把按钮点击事件转换为信号，点击按钮，就会发送信号
    [[self.btn rac_signalForControlEvents:UIControlEventTouchUpInside] subscribeNext:^(id x) {

        NSLog(@"按钮被点击了");
    }];
    
    
    
    代替通知:  rac_addObserverForName:用于监听某个通知。
    
     // 4.代替通知
    // 把监听到的通知转换信号
    [[[NSNotificationCenter defaultCenter] rac_addObserverForName:UIKeyboardWillShowNotification object:nil] subscribeNext:^(id x) {
        NSLog(@"键盘弹出");
    }];



    监听文本框文字改变:rac_textSignal:只要文本框发出改变就会发出这个信号。
    
    // 5.监听文本框的文字改变
   [_textField.rac_textSignal subscribeNext:^(id x) {

       NSLog(@"文字改变了%@",x);
   }];



   处理当界面有多次请求时，需要都获取到数据时，才能展示界面
       
   rac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，
   就会去触发第一个selector参数的方法。
   使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。
   
   
     // 6.处理多个请求，都返回结果的时候，统一做处理.
    RACSignal *request1 = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        // 发送请求1
        [subscriber sendNext:@"发送请求1"];
        return nil;
    }];
    
    RACSignal *request2 = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        // 发送请求2
        [subscriber sendNext:@"发送请求2"];
        return nil;
    }];
    
    // 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。
    [self rac_liftSelector:@selector(updateUIWithR1:r2:) withSignalsFromArray:@[request1,request2]];
    
    
	}
	// 更新UI
	- (void)updateUIWithR1:(id)data r2:(id)data1
	{
		NSLog(@"更新UI%@  %@",data,data1);
	}
	
	
	
	
	
	



ReactiveCocoa常见宏


   RAC(TARGET, [KEYPATH, [NIL_VALUE]])：  用于给某个对象的某个属性绑定信号
   
    // 只要文本框文字改变，就会修改label的文字
    RAC(self.labelView,text) = _textField.rac_textSignal;
    
    
    
  
   RACObserve(self, name):监听某个对象的某个属性,返回的是信号。
   
   [RACObserve(self.view, center) subscribeNext:^(id x) {
      
        NSLog(@"%@",x);
    }];
    
    
    
    @weakify(Obj)和@strongify(Obj)：一般两个都是配套使用,在主头文件(ReactiveCocoa.h)中并没有导入，需要自己手动导入，
    RACEXTScope.h才可以使用。但是每次导入都非常麻烦，只需要在主头文件自己导入就好了。
    
    
    
    
    
    RACTuplePack：把数据包装成RACTuple（元组类）
    
    // 把参数中的数据包装成元组
    RACTuple *tuple = RACTuplePack(@10,@20);
    
    
    
    
    RACTupleUnpack：把RACTuple（元组类）解包成对应的数据。
    
    // 把参数中的数据包装成元组
    RACTuple *tuple = RACTuplePack(@"xmg",@20);
    
    // 解包元组，会把元组的值，按顺序给参数里面的变量赋值
    // name = @"xmg" age = @20
    RACTupleUnpack(NSString *name,NSNumber *age) = tuple;
    
    
    
    
    
    
    
    
    
                             ReactiveCocoa之进阶篇
    
ReactiveCocoa操作须知
所有的信号（RACSignal）都可以进行操作处理，因为所有操作方法都定义在RACStream.h中，因此只要继承RACStream就有了操作处理方法。    


ReactiveCocoa操作思想
运用的是Hook（钩子）思想，Hook是一种用于改娈方法执行结果的技术. 每次在调用方法前，都会截获该方法，执行自己的方法，改变结果


ReactiveCocoa核心方法bind
ReactiveCocoa操作的核心方法是bind（绑定），RAC中核心开发方式也是绑定，RAC开发，应该把重心放在绑定，而不是赋值上，如果传统开发
创建对象，先给对象赋值一些数据，再执行方法，而绑定不一样，先把未来要执行的方法与对象绑定，以后再去赋值，对象会调用这个方法。
在开发中很少使用bind方法，bind属于RAC中的底层方法，RAC已经封装了很多好用的其他方法，底层都是调用bind，用法比bind简单.


bind举例：

   // 假设想监听文本框的内容，并且在每次输出结果的时候，都在文本框的内容拼接一段文字“输出：”

    // 方式一:在返回结果后，拼接。
        [_textField.rac_textSignal subscribeNext:^(id x) {

            NSLog(@"输出:%@",x);

        }];

    // 方式二:在返回结果前，拼接，使用RAC中bind方法做处理。
    // bind方法参数:需要传入一个返回值是RACStreamBindBlock的block参数 _textField.rac_textSignal bind:^RACStreamBindBlock
    // RACStreamBindBlock是一个block的类型，返回值是信号，参数（value,stop），因此参数的block返回值也是一个block。

    // RACStreamBindBlock:
    // 参数一(value):表示接收到信号的原始值，还没做处理
    // 参数二(*stop):用来控制绑定Block，如果*stop = yes,那么就会结束绑定。
    // 返回值：信号，做好处理，在通过这个信号返回出去，一般使用RACReturnSignal,需要手动导入头文件RACReturnSignal.h。

    // bind方法使用步骤:
    // 1.传入一个返回值RACStreamBindBlock的block。
    // 2.描述一个RACStreamBindBlock类型的bindBlock作为block的返回值。
    // 3.描述一个返回结果的信号，作为bindBlock的返回值。
    // 注意：在bindBlock中做信号结果的处理。

    // 底层实现:
    // 1.源信号调用bind,会重新创建一个绑定信号。
    // 2.当绑定信号被订阅，就会调用绑定信号中的didSubscribe，生成一个bindingBlock。
    // 3.当源信号有内容发出，就会把内容传递到bindingBlock处理，调用bindingBlock(value,stop)
    // 4.调用bindingBlock(value,stop)，会返回一个内容处理完成的信号（RACReturnSignal）。
    // 5.订阅RACReturnSignal，就会拿到绑定信号的订阅者，把处理完成的信号内容发送出来。

    // 注意:不同订阅者，保存不同的nextBlock，看源码的时候，一定要看清楚订阅者是哪个。
    // 这里需要手动导入#import <ReactiveCocoa/RACReturnSignal.h>，才能使用RACReturnSignal。
    [[_textField.rac_textSignal bind:^RACStreamBindBlock{//会创建一个bind信号

        // 什么时候调用:
        // block作用:表示绑定了一个信号.

        return ^RACStream *(id value, BOOL *stop){//value信号的原始值，保存didSubscribe

            // 什么时候调用block:当信号有新的值发出，就会来到这个block。值变化后就有新信号发出会调用bindingBlock

            // block作用:做返回值的处理

            // 做好处理，通过信号返回出去.RACReturnSignal信号会拿到订阅者把内容sendnext发送出去
            return [RACReturnSignal return:[NSString stringWithFormat:@"输出:%@",value]];
        };

    }] subscribeNext:^(id x) {//bind信号订阅时，会创建保存订阅者，订阅者属于bind信号返回的RACReturnSignal信号，信号中的didSubscribe，生成一个bindingBlock。

        NSLog(@"%@",x);

    }];
    
    
    
    
    
ReactiveCocoa操作方法之映射(flattenMap,Map)  flattenMap，Map用于把源信号内容映射成新的内容

flattenMap简单使用：

    // flattenMap作用:把源信号的内容映射成一个新的信号，信号可以是任意类型。

    // flattenMap使用步骤:
    // 1.传入一个block，block类型是返回值RACStream，参数value
    // 2.参数value就是源信号的内容，拿到源信号的内容做处理
    // 3.包装成RACReturnSignal信号，返回出去。


    [[_textField.rac_textSignal flattenMap:^RACStream *(id value) {

        // block什么时候 : 源信号发出的时候，就会调用这个block。

        // block作用 : 改变源信号的内容。

        // 返回值：绑定信号的内容.
        return [RACReturnSignal return:[NSString stringWithFormat:@"输出:%@",value]];

    }] subscribeNext:^(id x) {

        // 订阅绑定信号，每当源信号发送内容，做完处理，就会调用这个block。  创建保存的是bind信号返回信号RACReturnSignal的订阅者

        NSLog(@"%@",x);

    }];
    
    
     // flattenMap底层实现:
    // 0.flattenMap内部调用bind方法实现的,flattenMap中block的返回值，会作为bind中bindBlock的返回值。
    // 1.当订阅绑定信号，就会生成bindBlock。
    // 2.当源信号发送内容，就会调用bindBlock(value, *stop)
    // 3.调用bindBlock，内部就会调用flattenMap的block，flattenMap的block作用：就是把处理好的数据包装成信号。
    // 4.返回的信号最终会作为bindBlock中的返回信号，当做bindBlock的返回信号。
    // 5.订阅bindBlock的返回信号，就会拿到绑定信号的订阅者，把处理完成的信号内容发送出来。




    
Map简单使用:


    // Map作用:把源信号的值映射成一个新的值

    // Map使用步骤:
    // 1.传入一个block,类型是返回对象，参数是value
    // 2.value就是源信号的内容，直接拿到源信号的内容做处理
    // 3.把处理好的内容，直接返回就好了，不用包装成信号，返回的值，就是映射的值。
    
    
   [[_textField.rac_textSignal map:^id(id value) {
        // 当源信号发出，就会调用这个block，修改源信号的内容
        // 返回值：就是处理完源信号的内容。
        return [NSString stringWithFormat:@"输出:%@",value];
    }] subscribeNext:^(id x) {

        NSLog(@"%@",x);
    }];    
    
    
    // Map底层实现:  核心（Map底层其实是调用flatternMap）
    // 0.Map底层其实是调用flatternMap,Map中block中的返回的值会作为flatternMap中block中的值。
    // 1.当订阅绑定信号，就会生成bindBlock。
    // 3.当源信号发送内容，就会调用bindBlock(value, *stop)
    // 4.调用bindBlock，内部就会调用flattenMap的block
    // 5.flattenMap的block内部会调用Map中的block，把Map中的block返回的内容包装成返回的信号。
    // 5.返回的信号最终会作为bindBlock中的返回信号，当做bindBlock的返回信号。
    // 6.订阅bindBlock的返回信号，就会拿到绑定信号的订阅者，把处理完成的信号内容发送出来
    
    
FlatternMap和Map的区别
	1.FlatternMap中的Block返回信号。
	2.Map中的Block返回对象。
	3.开发中，如果信号发出的值不是信号，映射一般使用Map
	4.开发中，如果信号发出的值是信号，映射一般使用FlatternMap。
	
	
	
RACSubject的RACSubject（信号的信号）使用FlatternMap

    // 创建信号中的信号
    RACSubject *signalOfsignals = [RACSubject subject];//信号的信号
    RACSubject *signal = [RACSubject subject];//信号

    [[signalOfsignals flattenMap:^RACStream *(id value) {

     // 当signalOfsignals的signals发出信号才会调用

        return value;

    }] subscribeNext:^(id x) {

        // 只有signalOfsignals的signal发出信号才会调用，因为内部订阅了bindBlock中返回的信号，也就是flattenMap返回的信号。
        // 也就是flattenMap返回的信号发出内容，才会调用。

        NSLog(@"%@aaa",x);
    }];

    // 信号的信号发送信号
    [signalOfsignals sendNext:signal];

    // 信号发送内容
    [signal sendNext:@1];
    
    
    
    
ReactiveCocoa操作方法之组合  

concat:  按一定顺序拼接信号，当多个信号发出的时候，有顺序的接收信号。

    RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {

		[subscriber sendNext:@1];

		[subscriber sendCompleted];

		return nil;
	}];
	RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {

		[subscriber sendNext:@2];

		return nil;
	}];

	// 把signalA拼接到signalB后，signalA发送完成，signalB才会被激活。
	RACSignal *concatSignal = [signalA concat:signalB];

	// 以后只需要面对拼接信号开发。
	// 订阅拼接的信号，不需要单独订阅signalA，signalB
	// 内部会自动订阅。
	// 注意：第一个信号必须发送完成，第二个信号才会被激活
	[concatSignal subscribeNext:^(id x) {

		NSLog(@"%@",x);//打印两次，分别是第一个信号的值 第二个信号的值

	}];

	// concat底层实现:
	// 1.当拼接信号被订阅，就会调用拼接信号的didSubscribe
	// 2.didSubscribe中，会先订阅第一个源信号（signalA）
	// 3.会执行第一个源信号（signalA）的didSubscribe
	// 4.第一个源信号（signalA）didSubscribe中发送值，就会调用第一个源信号（signalA）订阅者的nextBlock,通过拼接信号的订阅者把值发送出来.
	// 5.第一个源信号（signalA）didSubscribe中发送完成，就会调用第一个源信号（signalA）订阅者的completedBlock,订阅第二个源信号（signalB）这时候才激活（signalB）。
	// 6.订阅第二个源信号（signalB）,执行第二个源信号（signalB）的didSubscribe
	// 7.第二个源信号（signalA）didSubscribe中发送值,就会通过拼接信号的订阅者把值发送出来.
	
	
	

then:  用于连接两个信号，当第一个信号完成，才会连接then返回的信号。

	// then:用于连接两个信号，当第一个信号完成，才会连接then返回的信号
	// 注意使用then，之前信号的值会被忽略掉.
	// 底层实现：1、先过滤掉之前的信号发出的值。2.使用concat连接then返回的信号
	[[[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
 
		[subscriber sendNext:@1];
		[subscriber sendCompleted];
		return nil;
	}] then:^RACSignal *{
		return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
			[subscriber sendNext:@2];
			return nil;
		}];
	}] subscribeNext:^(id x) {
  
		// 只能接收到第二个信号的值，也就是then返回信号的值，之前信号的值会被忽略掉
		NSLog(@"%@",x);
	}];
	
	
	
	
merge:  把多个信号合并为一个信号，任何一个信号有新值的时候就会调用，与concat拼接信号不同的是这里不需要等signalA发送完成再发送signalB


    // merge:把多个信号合并成一个信号
    //创建多个信号
    RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        [subscriber sendNext:@1];
        
        
        return nil;
    }];
    
    RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        [subscriber sendNext:@2];
        
        return nil;
    }];

    // 合并信号,任何一个信号发送数据，都能监听到.
    RACSignal *mergeSignal = [signalA merge:signalB];
    
    [mergeSignal subscribeNext:^(id x) {
       
        NSLog(@"%@",x);//打印两次信号的值 
        
    }];
    
    // 底层实现：
    // 1.合并信号被订阅的时候，就会遍历所有信号，并且发出这些信号。
    // 2.每发出一个信号，这个信号就会被订阅
    // 3.也就是合并信号一被订阅，就会订阅里面所有的信号。
    // 4.只要有一个信号被发出就会被监听。
    
    
    
zipWith:    把两个信号压缩成一个信号，只有当两个信号同时发出信号内容时，并且把两个信号的内容合并成一个元组，才会触发压缩流的next事件。

   RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        [subscriber sendNext:@1];
        
        
        return nil;
    }];
    
    RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        [subscriber sendNext:@2];
        
        return nil;
    }];

    
    
    // 压缩信号A，信号B
    RACSignal *zipSignal = [signalA zipWith:signalB];
    
    [zipSignal subscribeNext:^(id x) {
       
        NSLog(@"%@",x);//接收一次，里面包含信号1和信号2的值
    }];
    
    // 底层实现:
    // 1.定义压缩信号，内部就会自动订阅signalA，signalB
    // 2.每当signalA或者signalB发出信号，就会判断signalA，signalB有没有发出个信号，有就会把最近发出的信号都包装成元组发出。
    
    
    
    
combineLatest:    与zipWith没什么区别，将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。

     RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
       
       [subscriber sendNext:@1];
       
       return nil;
   }];
   
   RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
       
       [subscriber sendNext:@2];
       
       return nil;
   }];

   // 把两个信号组合成一个信号,跟zip一样，没什么区别
   RACSignal *combineSignal = [signalA combineLatestWith:signalB];
 
   [combineSignal subscribeNext:^(id x) {
      
       NSLog(@"%@",x);
   }];
   
   // 底层实现：
   // 1.当组合信号被订阅，内部会自动订阅signalA，signalB,必须两个信号都发出内容，才会被触发。
   // 2.并且把两个信号组合成元组发出。
   
   
   
reduce聚合:    由于信号发出的内容是元组，把信号发出元组的值聚合成一个值，（即把返回结果为元组的值更换返回类型）每个信号发送信号都能收到一次

	  RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
	 
		 [subscriber sendNext:@1];
	 
		 return nil;
	 }];
 
	 RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
	 
		 [subscriber sendNext:@2];
	 
		 return nil;
	 }];
 
	 // 聚合
	 // 常见的用法，（先组合在聚合）。combineLatest:(id<NSFastEnumeration>)signals reduce:(id (^)())reduceBlock
	 // reduce中的block简介:
	 // reduceblcok中的参数，有多少信号组合，reduceblcok就有多少参数，每个参数就是之前信号发出的内容
	 // reduceblcok的返回值：聚合信号之后的内容。
	RACSignal *reduceSignal = [RACSignal combineLatest:@[signalA,signalB] reduce:^id(NSNumber *num1 ,NSNumber *num2){
 
		return [NSString stringWithFormat:@"%@ %@",num1,num2];
	
	}];
 
	 [reduceSignal subscribeNext:^(id x) {
	
		 NSLog(@"%@",x);
	 }];
 
	 // 底层实现:
	 // 1.订阅聚合信号，每次有内容发出，就会执行reduceblcok，把信号内容转换成reduceblcok返回的值。
	 
	 
	 
	 
ReactiveCocoa操作方法之过滤

filter:  过滤信号 获取满足条件的信号.

	// 过滤:
	// 每次信号发出，会先执行过滤条件判断.
	[_textField.rac_textSignal filter:^BOOL(NSString *value) {
			return value.length > 3;
	}];
	

ignore:  忽略完某些值的信号
    // 内部调用filter过滤，忽略掉ignore的值
	[[_textField.rac_textSignal ignore:@"1"] subscribeNext:^(id x) {

		NSLog(@"%@",x);
	}];


distinctUntilChanged:  当上一次的值和当前的值有明显的变化就会发出信号，否则会被忽略掉

    // 过滤，当上一次和当前的值不一样，就会发出内容。
	// 在开发中，刷新UI经常使用，只有两次数据不一样才需要刷新
	[[_textField.rac_textSignal distinctUntilChanged] subscribeNext:^(id x) {
  
		NSLog(@"%@",x);
	}];
	
	

take:  从开始一共取N次的信号

	// 1、创建信号
	RACSubject *signal = [RACSubject subject];

	// 2、处理信号，订阅信号
	[[signal take:1] subscribeNext:^(id x) {
	
		NSLog(@"%@",x);
	}];

	// 3.发送信号
	[signal sendNext:@1];

	[signal sendNext:@2];
	
	
takeLast:取最后N次的信号,前提条件，订阅者必须调用完成，因为只有完成，就知道总共有多少信号.

	// 1、创建信号
	RACSubject *signal = [RACSubject subject];

	// 2、处理信号，订阅信号
	[[signal takeLast:1] subscribeNext:^(id x) {
	
		NSLog(@"%@",x);
	}];

	// 3.发送信号
	[signal sendNext:@1];

	[signal sendNext:@2];

	[signal sendCompleted];
	
	
takeUntil:(RACSignal *):  获取信号直到某个信号执行完成

	// 监听文本框的改变直到当前对象被销毁
	[_textField.rac_textSignal takeUntil:self.rac_willDeallocSignal];
	
	
skip:(NSUInteger):  跳过几个信号,不接受。

	// 表示输入第一次，不会被监听到，跳过第一次发出的信号
	[[_textField.rac_textSignal skip:1] subscribeNext:^(id x) {
   
		NSLog(@"%@",x);
	}];
	
	
switchToLatest:用于signalOfSignals（信号的信号），有时候信号也会发出信号，会在signalOfSignals中，获取signalOfSignals发送的最新信号。

	RACSubject *signalOfSignals = [RACSubject subject];
	RACSubject *signal = [RACSubject subject];

	// 获取信号中信号最近发出信号，订阅最近发出的信号。
	// 注意switchToLatest：只能用于信号中的信号
	[signalOfSignals.switchToLatest subscribeNext:^(id x) {
   
		NSLog(@"%@",x);
	}];
	[signalOfSignals sendNext:signal];//信号中的信号
	[signal sendNext:@1];
	
	
	
	
ReactiveCocoa操作方法之秩序

doNext:  执行Next之前，会先执行这个Block
doCompleted:  执行sendCompleted之前，会先执行这个Block

	[[[[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
	    [subscriber sendNext:@1];
	    [subscriber sendCompleted];
	     return nil;
	}] doNext:^(id x) {
	// 执行[subscriber sendNext:@1];之前会调用这个Block
	    NSLog(@"doNext");;
	}] doCompleted:^{
	    // 执行[subscriber sendCompleted];之前会调用这个Block
	    NSLog(@"doCompleted");;
	}] subscribeNext:^(id x) {
  
		NSLog(@"%@",x);
	}];
	
	
	
ReactiveCocoa操作方法之线程

deliverOn: 内容传递切换到制定线程中，副作用在原来线程中,把在创建信号时block中的代码称之为副作用。

subscribeOn: 内容传递和副作用都会切换到制定线程中



ReactiveCocoa操作方法之时间

timeout：超时，可以让一个信号在一定的时间后，自动报错

	 RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
		return nil;
	}] timeout:1 onScheduler:[RACScheduler currentScheduler]];


	[signal subscribeNext:^(id x) {
	
		NSLog(@"%@",x);
	} error:^(NSError *error) {
		// 1秒后会自动调用
		NSLog(@"%@",error);
	}];
	
	
interval 定时：每隔一段时间发出信号

	[[RACSignal interval:1 onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(id x) {
   
		NSLog(@"%@",x);
	}];


delay： 延迟发送next

    RACSignal *signal = [[[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
   
		[subscriber sendNext:@1];
		return nil;
		
	}] delay:2] subscribeNext:^(id x) {
  
		NSLog(@"%@",x);
	}];




ReactiveCocoa操作方法之重复

retry重试 ：只要失败，就会重新执行创建信号中的block,直到成功.

     __block int i = 0;
    [[[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
    
            if (i == 10) {
                [subscriber sendNext:@1];
            }else{
                NSLog(@"接收到错误");
                [subscriber sendError:nil];
            }
            i++;
        
        return nil;
        
    }] retry] subscribeNext:^(id x) {
        
        NSLog(@"%@",x);
        
    } error:^(NSError *error) {
      
        
    }];
    

replay重放：当一个信号被多次订阅,反复播放内容

    RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
   
    
		[subscriber sendNext:@1];
		[subscriber sendNext:@2];
		return nil;
		
	}] replay];

	[signal subscribeNext:^(id x) {
   
		NSLog(@"第一个订阅者%@",x);
	
	}];

	[signal subscribeNext:^(id x) {
	
		NSLog(@"第二个订阅者%@",x);
	
	}];
	
	
	
throttle节流:  当某个信号发送比较频繁时，可以使用节流，在某一段时间不发送信号内容，过了一段时间获取信号的最新内容发出

    RACSubject *signal = [RACSubject subject];

    _signal = signal;

	// 节流，在一定时间（1秒）内，不接收任何信号内容，过了这个时间（1秒）获取最后发送的信号内容发出。
	[[signal throttle:1] subscribeNext:^(id x) {
   
		NSLog(@"%@",x);
	}];
	
	
	
	
	
	
	
	
介绍MVVM架构思想

常见的架构思想:

MVC M:模型 V:视图 C:控制器
MVVM M:模型 V:视图+控制器 VM:视图模型
   我的理解：
     V：视图层view,viewcontrol：
        view：   控件初始化，设置数据，事件代理，不涉及网络，业务数据，只是ui数据设置，有交互以代理方式回传给viewcontrol
        viewcontrol:视图的创建，组合，包括视图之间协调逻辑，view事件回调处理
     VM:业务逻辑层viewmodel：
        viewmodel：业务逻辑处理，预排版，把网络数据转成ui数据。数据增删改查的封装者，不承担增删改查逻辑，线程安全处理，如微博下拉刷新，
        同时删除评论，需保证线程安全。
     数据层engine和model:
        engine：负责网络请求，数据解析，实际增删改查，本地的处理逻辑，如对server适配，如返回的字段需要转化传给ui
        
MVCS M:模型 V:视图 C:控制器 S:服务类

VIPER V:视图 I:交互器 P:展示器 E:实体 R:路由



MVVM介绍

模型(M):保存视图数据。

视图+控制器(V):展示内容 + 如何展示

视图模型(VM):处理展示的业务逻辑，包括按钮的点击，数据的请求和解析等等。


ReactiveCocoa + MVVM 实战一：   登录界面

需求+分析+步骤

/* 需求：1.监听两个文本框的内容，有内容才允许按钮点击
        2.默认登录请求.
 
   用MVVM：实现，之前界面的所有业务逻辑
   分析：1.之前界面的所有业务逻辑都交给控制器做处理
        2.在MVVM架构中把控制器的业务全部搬去VM模型，也就是每个控制器对应一个VM模型.
 
   步骤：1.创建LoginViewModel类，处理登录界面业务逻辑.
        2.这个类里面应该保存着账号的信息，创建一个账号Account模型
        3.LoginViewModel应该保存着账号信息Account模型。
        4.需要时刻监听Account模型中的账号和密码的改变，怎么监听？
        5.在非RAC开发中，都是习惯赋值，在RAC开发中，需要改变开发思维，由赋值转变为绑定，可以在一开始初始化的时候，就给Account模型中的属性绑定，并不需要重写set方法。
        6.每次Account模型的值改变，就需要判断按钮能否点击，在VM模型中做处理，给外界提供一个能否点击按钮的信号.
        7.这个登录信号需要判断Account中账号和密码是否有值，用KVO监听这两个值的改变，把他们聚合成登录信号.
        8.监听按钮的点击，由VM处理，应该给VM声明一个RACCommand，专门处理登录业务逻辑.
        9.执行命令，把数据包装成信号传递出去
        10.监听命令中信号的数据传递
        11.监听命令的执行时刻
 */
 
 


VM的代码

	@interface LoginViewModel : NSObject

	@property (nonatomic, strong) Account *account;


	// 是否允许登录的信号
	@property (nonatomic, strong, readonly) RACSignal *enableLoginSignal;

	@property (nonatomic, strong, readonly) RACCommand *LoginCommand;

	@end

	@implementation LoginViewModel
	- (Account *)account
	{
		if (_account == nil) {
			_account = [[Account alloc] init];
		}
		return _account;
	}
	- (instancetype)init
	{
		if (self = [super init]) {
			[self initialBind];
		}
		return self;
	}


	// 初始化绑定
	- (void)initialBind
	{
		// 监听账号的属性值改变，把他们聚合成一个信号。有多少信号组合，reduceblcok就有多少参数，每个参数就是之前信号发出的内容
		// 信号1RACObserve(self.account, account) 信号2   RACObserve(self.account, pwd) 
		// RACObserve(self, name):监听某个对象的某个属性,返回的是信号
		// control中代码：RAC(self.loginBtn,enabled) = self.loginViewModel.enableLoginSignal;按钮与信号绑定，会使enabled属性自动变为yes或no
		//监听文本框输入状态，确定按钮是否可以点击，return @(account.length && pwd.length);返回为bool值
		_enableLoginSignal = [RACSignal combineLatest:@[RACObserve(self.account, account),RACObserve(self.account, pwd)] reduce:^id(NSString *account,NSString *pwd)
		{
	
			return @(account.length && pwd.length);
	
		}];

		// 处理登录业务逻辑
		_LoginCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {
	
			NSLog(@"点击了登录");
			return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {//RACCommand 必须返回信号
		
				// 模仿网络延迟
				dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
			
					[subscriber sendNext:@"登录成功"];//1。发送信号
			
					// 数据传送完毕，必须调用完成，否则命令永远处于执行状态
					[subscriber sendCompleted];
				});
		
				return nil;
			}];
		}];

		// 监听登录产生的数据 LoginCommand.executionSignals是RACCommand中的信号，switchToLatest表示信号的信号
		// 这段代码表示要订阅LoginCommand中信号中的信号 上面的[subscriber sendNext:@"登录成功"]，下面这个block则会执行
		[_LoginCommand.executionSignals.switchToLatest subscribeNext:^(id x) {
   
			if ([x isEqualToString:@"登录成功"]) {
				NSLog(@"登录成功");
			}
		}];

		// 监听登录状态
		// skip:1  表示输入第一次，不会被监听到，跳过第一次发出的信号
		// 监听命令是否执行完毕,默认会来一次，可以直接跳过，skip表示跳过第一次信号
		[[_LoginCommand.executing skip:1] subscribeNext:^(id x) {
			if ([x isEqualToNumber:@(YES)]) {
		
				// 正在登录ing... 命令信号正在执行
				// 用蒙版提示
				[MBProgressHUD showMessage:@"正在登录..."];
	   
		
			}else
			{
				// 登录成功    命令信号执行完成
				// 隐藏蒙版
				[MBProgressHUD hideHUD];
			}
		}];
	}

 
 
控制器的代码:  控制器只是绑定了按钮可否点击与是否可点击信号，绑定输入框内容改变与loginViewModel.account，业务逻辑全在vm中
 
 
		@interface ViewController ()

		@property (nonatomic, strong) LoginViewModel *loginViewModel;

		@property (weak, nonatomic) IBOutlet UITextField *accountField;
		@property (weak, nonatomic) IBOutlet UITextField *pwdField;

		@property (weak, nonatomic) IBOutlet UIButton *loginBtn;


		@end

		- (LoginViewModel *)loginViewModel
		{
			if (_loginViewModel == nil) {
		
				_loginViewModel = [[LoginViewModel alloc] init];
			}
			return _loginViewModel;
		}

		// 视图模型绑定
		- (void)bindModel
		{
			// 给模型的属性绑定信号
			// 只要账号文本框一改变，就会给account赋值
			//RACObserve(self, name):监听某个对象的某个属性,返回的是信号
			//self.loginViewModel.account会绑定文本框文字变化的信号
			RAC(self.loginViewModel.account, account) = _accountField.rac_textSignal;
			RAC(self.loginViewModel.account, pwd) = _pwdField.rac_textSignal;
	
			// 绑定登录按钮  业务需求，监听两个文本框的内容，有内容才允许按钮点击  
			// 按钮的可否点击属性会绑定 self.loginViewModel.enableLoginSignal登录开关信号
			RAC(self.loginBtn,enabled) = self.loginViewModel.enableLoginSignal;
	
		   // 监听登录按钮点击
			[[_loginBtn rac_signalForControlEvents:UIControlEventTouchUpInside] subscribeNext:^(id x) {
	  
				// 执行登录事件执行命令,会执行LoginCommand信号，相当于sendNext
				[self.loginViewModel.LoginCommand execute:nil];
			}];
		}







ReactiveCocoa + MVVM 实战二：网络请求数据

接口：这里先给朋友介绍一个免费的网络数据接口，豆瓣。可以经常用来练习一些网络请求的小Demo.

需求+分析+步骤

/*
    需求：请求豆瓣图书信息，url:https://api.douban.com/v2/book/search?q=基础
    
    分析：请求一样，交给VM模型管理
 
    步骤:
        1.控制器提供一个视图模型（requesViewModel），处理界面的业务逻辑
        2.VM提供一个命令，处理请求业务逻辑
        3.在创建命令的block中，会把请求包装成一个信号，等请求成功的时候，就会把数据传递出去。
        4.请求数据成功，应该把字典转换成模型，保存到视图模型中，控制器想用就直接从视图模型中获取。
        5.假设控制器想展示内容到tableView，直接让视图模型成为tableView的数据源，把所有的业务逻辑交给视图模型去做，这样控制器的代码就非常少了。
 */
 
 
 
视图模型(VM)代码

		@interface RequestViewModel : NSObject<UITableViewDataSource>


			// 请求命令
			@property (nonatomic, strong, readonly) RACCommand *reuqesCommand;

			//模型数组
			@property (nonatomic, strong, readonly) NSArray *models;



		@end

		@implementation RequestViewModel

		- (instancetype)init
		{
			if (self = [super init]) {
		
				[self initialBind];
			}
			return self;
		}


		- (void)initialBind
		{
			_reuqesCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {
		
				RACSignal *requestSignal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
		   
			
					NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
					parameters[@"q"] = @"基础";
			
					// 发送请求
					[[AFHTTPRequestOperationManager manager] GET:@"https://api.douban.com/v2/book/search" parameters:parameters success:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) {
						NSLog(@"%@",responseObject);
				
						// 请求成功调用
						// 把数据用信号传递出去
						// 控制器订阅后会接收到这个信号，但这个信号会被第三步数据处理
						[subscriber sendNext:responseObject];
				
						[subscriber sendCompleted];
				
				
					} failure:^(AFHTTPRequestOperation * _Nonnull operation, NSError * _Nonnull error) {
						// 请求失败调用
				
					}];
			
					return nil;
				}];
		
		
		
	            //第三步先进行数据处理
				// 在返回数据信号时，把数据中的字典映射成模型信号，传递出去
				return [requestSignal map:^id(NSDictionary *value) {
					NSMutableArray *dictArr = value[@"books"];

					// 字典转模型，遍历字典中的所有元素，全部映射成模型，并且生成数组
					NSArray *modelArr = [[dictArr.rac_sequence map:^id(id value) {
			 
						return [Book bookWithDict:value];
					}] array];
			
					return modelArr;
				}];
		
			}];
	
		 }

		#pragma mark - UITableViewDataSource

		- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
		{
			return self.models.count;
		}

		- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
		{
			static NSString *ID = @"cell";
			UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID];
			if (cell == nil) {
		
				cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:ID];
			}
	
			Book *book = self.models[indexPath.row];
			cell.detailTextLabel.text = book.subtitle;
			cell.textLabel.text = book.title;
	
			return cell;
		}

		@end
 
 
 
控制器代码

	@interface ViewController ()

	@property (nonatomic, weak) UITableView *tableView;

	@property (nonatomic, strong) RequestViewModel *requesViewModel;


	@end

	@implementation ViewController
	- (RequestViewModel *)requesViewModel
	{
		if (_requesViewModel == nil) {
			_requesViewModel = [[RequestViewModel alloc] init];
		}
		return _requesViewModel;
	}

	- (void)viewDidLoad {
		[super viewDidLoad];
		// Do any additional setup after loading the view, typically from a nib.
	
		// 创建tableView
		UITableView *tableView = [[UITableView alloc] initWithFrame:self.view.bounds];
		tableView.dataSource = self.requesViewModel;
	
		[self.view addSubview:tableView];
	
		// 执行命令信号的请求
	 RACSignal *requesSiganl = [self.requesViewModel.reuqesCommand execute:nil];
   
	   // 获取请求的数据，订阅命令信号
		[requesSiganl subscribeNext:^(NSArray *x) {
		
			self.requesViewModel.models = x;
		
			[self.tableView reloadData];
		
		}];

	}


	@end











iOS 从MVC到MVP到mvvm https://blog.csdn.net/xiaozhuanddapang/article/details/78553215



mvc：
苹果的设计要点：
c与m的关系：controller 用于更新model  model更新完成通知controller
c与v的关系：view的点击事件会通知controller，controller会更新view

但在实际使用中：ViewController 同时扮演了view和controller的功能，所以controller持有model数据更新
view变成了view和model之间的交互，view和model产生了耦合，controller和model产生了耦合
代码如下：

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:self.cellIdentifier forIndexPath:indexPath];
    id model = [self modelsAtIndexPath:indexPath];
    
    cell.model = model;
    
    return cell;
}

还记得这段代码“cell.model = model;”我们曾经都这么写，很方便很高大。



具体如下：

模型层： 
Person.h

#import <Foundation/Foundation.h>

@interface Person : NSObject

@property (nonatomic, readonly) NSString *firstName;
@property (nonatomic, readonly) NSString *lastName;

- (instancetype)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName;

@end

Person.m

#import "Person.h"

@implementation Person

- (instancetype)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName {
    self = [super init];
    if (self) {
        _firstName = firstName;
        _lastName = lastName;
    }
    return self;
}

@end 








视图层： 
TestView.h

#import <UIKit/UIKit.h>

@interface TestView : UIView

@property (nonatomic, strong) UILabel *nameLabel;

@end
 
 
 
TestView.m

#import "TestView.h"

@implementation TestView

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        self.nameLabel = [[UILabel alloc] initWithFrame:self.bounds];
        self.nameLabel.textAlignment = NSTextAlignmentCenter;
        [self addSubview:self.nameLabel];
    }
    return self;
}

@end 





控制器层： 
ViewController.m

#import "ViewController.h"
#import "Person.h"
#import "TestView.h"

@interface ViewController ()

@property (nonatomic, strong) Person *personModel;
@property (nonatomic, strong) TestView *testView;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    [self setupViews];

    if (self.personModel.firstName.length > 0) {
        self.testView.nameLabel.text = self.personModel.firstName;
    } else {
        self.testView.nameLabel.text = self.personModel.lastName;
    }

}

- (void)setupViews {
    self.personModel = [[Person alloc] initWithFirstName:@"" lastName:@"胡歌"];
    self.testView = [[TestView alloc] initWithFrame:CGRectMake(100, 100, CGRectGetWidth(self.view.bounds)-200, 50)];
    [self.view addSubview:self.testView];
}

@end 









MVP：
把ViewController作了拆分，业务逻辑部份拆分为Presenter（主持人），其它部份和view作为视图层
v视图层指的是：ViewController除逻辑部份的其它和View
p视图数据逻辑部份：把ViewController业务逻辑拆分出来作为p,p和视图的通信通过协议进行通信
m模型层：还是原来的model

mvp把view和controler 以及view和model真正的作到了解藕，但是代码量比mvc大，过于笨拙


Presenter层完成业务逻辑处理，更新Model层，更新ui，完全隔断Model和View之间的通信。
通过协议接口的方式来连接view和presenter层，如果页面复杂，会产生更多的接口，为了处理一些
类似的问题，定义一些基类接口，把一些公共的逻辑，比如网络请求，toast，提示框等放在里面。 
MVP中的Presenter更多的作为框架的控制者，承担了大量的逻辑操作。



模型层： 
Person.h

#import <Foundation/Foundation.h>

@interface Person : NSObject

@property (nonatomic, readonly) NSString *firstName;
@property (nonatomic, readonly) NSString *lastName;

- (instancetype)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName;

@end
 
 
 
 
Person.m

#import "Person.h"

@implementation Person

- (instancetype)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName {
    self = [super init];
    if (self) {
        _firstName = firstName;
        _lastName = lastName;
    }
    return self;
}

@end 



视图层： 
TestView.h

#import <UIKit/UIKit.h>

@interface TestView : UIView

@property (nonatomic, strong) UILabel *nameLabel;

@end



TestView.m

#import "TestView.h"

@implementation TestView

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        self.nameLabel = [[UILabel alloc] initWithFrame:self.bounds];
        self.nameLabel.textAlignment = NSTextAlignmentCenter;
        [self addSubview:self.nameLabel];
    }
    return self;
}

@end 




Presenter层： 

PersonViewProtocol.h

#import <Foundation/Foundation.h>

@protocol PersonViewProtocol <NSObject>  //定义了一个协议PersonViewProtocol 

- (void)setNameText:(NSString *)nameText;

@end



Presenter.h

#import <Foundation/Foundation.h>
#import "PersonViewProtocol.h"

@interface Presenter : NSObject

- (void)attachView:(id <PersonViewProtocol>)view;//定义添加view的方法，目的是拿到转入的view

- (void)fetchData;//获取数据的方法,目的是获取到model并设置代理回调函数

@end



Presenter.m

#import "Presenter.h"
#import "Person.h"

@interface Presenter()

@property (nonatomic, strong) Person *person;
@property (nonatomic, weak) id<PersonViewProtocol> attachView;

@end

@implementation Presenter

- (void)attachView:(id<PersonViewProtocol>)view {
    self.attachView = view;
}

- (void)fetchData {
    self.person = [[Person alloc] initWithFirstName:@"赵丽颖" lastName:@"胡歌"];
    if (self.person.firstName.length > 0) {
        [self.attachView setNameText:self.person.firstName];
    } else {
        [self.attachView setNameText:self.person.lastName];
    }
}

@end 





ViewController.m

#import "ViewController.h"
#import "PersonViewProtocol.h"
#import "Presenter.h"
#import "TestView.h"

@interface ViewController ()<PersonViewProtocol>

@property (nonatomic, strong) TestView *testView;
@property (nonatomic, strong) Presenter *presenter;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    [self setupViews];

    self.presenter = [Presenter new];
    [self.presenter attachView:self];//添加view
    [self.presenter fetchData];//获取到数据后回调这个view
}

- (void)setupViews {
    self.testView = [[TestView alloc] initWithFrame:CGRectMake(100, 100, CGRectGetWidth(self.view.bounds)-200, 50)];
    [self.view addSubview:self.testView];

}

#pragma PersonViewProtocol
- (void)setNameText:(NSString *)nameText {
    self.testView.nameLabel.text = nameText;
}

@end 










MVVM

在MVP的基础上，将P改成与V双向绑定的VM就变成了MVVM。就是v和vm不再通过代理方式通信，而是通过v和vm双向绑定进行通信
绑定：是一种响应式的通信方式，观察某个label的值是否有变化，绑定label的这个值，其它对象要得知这个值是否变化
只需要kvo或者响应式方式可实现。
vM感知V中某个属性值的变化，当变化后vm设置不同的状态，同时v也能感知到vm中状态的变化，根据变化的状态，可以设置v的其它控件属性值。

需求+分析+步骤

/*
    需求：请求豆瓣图书信息，url:https://api.douban.com/v2/book/search?q=基础
    
    分析：请求一样，交给VM模型管理
 
    步骤:
        1.控制器提供一个视图模型（requesViewModel），处理界面的业务逻辑
        2.VM提供一个命令，处理请求业务逻辑
        3.在创建命令的block中，会把请求包装成一个信号，等请求成功的时候，就会把数据传递出去。
        4.请求数据成功，应该把字典转换成模型，保存到视图模型中，控制器想用就直接从视图模型中获取。
        5.假设控制器想展示内容到tableView，直接让视图模型成为tableView的数据源，把所有的业务逻辑交给视图模型去做，这样控制器的代码就非常少了。
 */
 
 
 
视图模型(VM)代码

		@interface RequestViewModel : NSObject<UITableViewDataSource>


			// 请求命令
			@property (nonatomic, strong, readonly) RACCommand *reuqesCommand;

			//模型数组
			@property (nonatomic, strong, readonly) NSArray *models;



		@end

		@implementation RequestViewModel

		- (instancetype)init
		{
			if (self = [super init]) {
		
				[self initialBind];
			}
			return self;
		}

    
//把业务逻辑的请求是否完成以及数据作了绑定，状态发生改变通知view
		- (void)initialBind
		{
			_reuqesCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {//初始化
		
		        //创建一个信号，这个信号必须返回，命令模式的用法
				RACSignal *requestSignal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
		   
			
					NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
					parameters[@"q"] = @"基础";
			
					// 发送请求
					[[AFHTTPRequestOperationManager manager] GET:@"https://api.douban.com/v2/book/search" parameters:parameters success:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) {
						NSLog(@"%@",responseObject);
				
						// 请求成功调用
						// 把数据用信号传递出去
						// 控制器订阅后会接收到这个信号，但这个信号会被第三步数据处理
						[subscriber sendNext:responseObject];
				
						[subscriber sendCompleted];//发送信号完成
				
				
					} failure:^(AFHTTPRequestOperation * _Nonnull operation, NSError * _Nonnull error) {
						// 请求失败调用
				
					}];
			
					return nil;
				}];
		
		
		
	            //第三步先进行数据处理
				// 在返回数据信号时，把数据中的字典映射成模型信号，传递出去
				return [requestSignal map:^id(NSDictionary *value) {
					NSMutableArray *dictArr = value[@"books"];

					// 字典转模型，遍历字典中的所有元素，全部映射成模型，并且生成数组
					NSArray *modelArr = [[dictArr.rac_sequence map:^id(id value) {
			 
						return [Book bookWithDict:value];
					}] array];
			
					return modelArr;
				}];
		
			}];
	
		 }

		#pragma mark - UITableViewDataSource

		- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
		{
			return self.models.count;
		}

		- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
		{
			static NSString *ID = @"cell";
			UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:ID];
			if (cell == nil) {
		
				cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:ID];
			}
	
			Book *book = self.models[indexPath.row];
			cell.detailTextLabel.text = book.subtitle;
			cell.textLabel.text = book.title;
	
			return cell;
		}

		@end
 
 
 
控制器代码

	@interface ViewController ()

	@property (nonatomic, weak) UITableView *tableView;

	@property (nonatomic, strong) RequestViewModel *requesViewModel;


	@end

	@implementation ViewController
	- (RequestViewModel *)requesViewModel
	{
		if (_requesViewModel == nil) {
			_requesViewModel = [[RequestViewModel alloc] init];
		}
		return _requesViewModel;
	}

	- (void)viewDidLoad {
		[super viewDidLoad];
		// Do any additional setup after loading the view, typically from a nib.
	
		// 创建tableView
		UITableView *tableView = [[UITableView alloc] initWithFrame:self.view.bounds];
		tableView.dataSource = self.requesViewModel;
	
		[self.view addSubview:tableView];
	
		// 执行命令信号的请求
	 RACSignal *requesSiganl = [self.requesViewModel.reuqesCommand execute:nil];
   
	   // 获取请求的数据，订阅命令信号
		[requesSiganl subscribeNext:^(NSArray *x) {
		
			self.requesViewModel.models = x;
		
			[self.tableView reloadData];
		
		}];

	}


	@end




